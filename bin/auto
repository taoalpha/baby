### baby completion - begin. generated by omelette.js ###
if type compdef &>/dev/null; then
  _baby_completion() {
    compadd -- `baby --compzsh --compgen "${CURRENT}" "${words[CURRENT-1]}" "${BUFFER}"`
  }
  compdef _baby_completion baby
elif type complete &>/dev/null; then
  _baby_completion () {
    COMPREPLY=( $(compgen -W '$(baby --compzsh --compgen "${COMP_CWORD}" "${COMP_WORDS[COMP_CWORD-1]}" "${COMP_LINE}")' -- "${COMP_WORDS[COMP_CWORD]}") )
#    local words cword
#    if type _get_comp_words_by_ref &>/dev/null; then
#      _get_comp_words_by_ref -n = -n @ -w words -i cword
#    else
#      cword="$COMP_CWORD"
#      words=("${COMP_WORDS[@]}")
#    fi
#
#    local si="$IFS"
#    IFS=$'\n' COMPREPLY=($(COMP_CWORD="$cword" \
#                           COMP_LINE="$COMP_LINE" \
#                           COMP_POINT="$COMP_POINT" \
#                           baby --compzsh --compgen "${COMP_CWORD}" "${COMP_WORDS[COMP_CWORD-1]}" "${COMP_LINE}" -- "${COMP_WORDS[COMP_CWORD]}" \
#                           2>/dev/null)) || return $?
#    IFS="$si"
#
  }
  complete -o default -F _baby_completion baby

#elif type compdef &>/dev/null; then
#  _baby_completion() {
#    compadd -- `baby --compzsh --compgen "${CURRENT}" "${words[CURRENT-1]}" "${BUFFER}"`
#  }
#  compdef _baby_completion baby
fi

### baby completion - end ###
